#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 5
void prepareMatrix(char key[], char matrix[SIZE][SIZE]) {
    int i, j, k, flag = 0;
    int alphabet[26] = {0}; 
    int keyLen = strlen(key);
    k = 0;
    for (i = 0; i < keyLen; i++) {
        if (key[i] == 'j') key[i] = 'i'; 
        if (alphabet[key[i] - 'a'] == 0) {
            matrix[k / SIZE][k % SIZE] = key[i];
            alphabet[key[i] - 'a'] = 1;
            k++;
        }
    }
    for (i = 0; i < 26; i++) {
        if (i + 'a' == 'j') continue;
        if (alphabet[i] == 0) {
            matrix[k / SIZE][k % SIZE] = i + 'a';
            k++;
        }
    }
}
void printMatrix(char matrix[SIZE][SIZE]) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            printf("%c ", matrix[i][j]);
        }
        printf("\n");
    }
}
void processPlaintext(char plaintext[]) {
    int i, len = strlen(plaintext);
    for (i = 0; i < len; i++) {
        if (plaintext[i] == 'j') plaintext[i] = 'i'; 
    }
    for (i = 0; i < len; i += 2) {
        if (plaintext[i] == plaintext[i + 1]) {
            memmove(plaintext + i + 2, plaintext + i + 1, len - i);
            plaintext[i + 1] = 'x'; 
            len++;
        }
    }
    if (len % 2 != 0) {
        plaintext[len] = 'x'; 
        plaintext[len + 1] = '\0';
    }
}
void findPosition(char matrix[SIZE][SIZE], char c, int *row, int *col) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (matrix[i][j] == c) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}
void encryptPair(char matrix[SIZE][SIZE], char *first, char *second) {
    int row1, col1, row2, col2;
    findPosition(matrix, *first, &row1, &col1);
    findPosition(matrix, *second, &row2, &col2);
    if (row1 == row2) {
        *first = matrix[row1][(col1 + 1) % SIZE];
        *second = matrix[row2][(col2 + 1) % SIZE];
    } else if (col1 == col2) {
        *first = matrix[(row1 + 1) % SIZE][col1];
        *second = matrix[(row2 + 1) % SIZE][col2];
    } else {
        *first = matrix[row1][col2];
        *second = matrix[row2][col1];
    }
}
void encrypt(char matrix[SIZE][SIZE], char plaintext[], char ciphertext[]) {
    int i;
    int len = strlen(plaintext);
    for (i = 0; i < len; i += 2) {
        char first = plaintext[i];
        char second = plaintext[i + 1];
        encryptPair(matrix, &first, &second);
        ciphertext[i] = first;
        ciphertext[i + 1] = second;
    }
    ciphertext[len] = '\0';
}
int main() {
    char key[SIZE * SIZE];
    char matrix[SIZE][SIZE];
    char plaintext[100], ciphertext[100];
    printf("Enter the keyword: ");
    scanf("%s", key);
    for (int i = 0; i < strlen(key); i++) {
        key[i] = tolower(key[i]);
    }
    prepareMatrix(key, matrix);
    printf("\nMatrix:\n");
    printMatrix(matrix);
    printf("\nEnter the plaintext: ");
    scanf("%s", plaintext);
    for (int i = 0; i < strlen(plaintext); i++) {
        plaintext[i] = tolower(plaintext[i]);
    }
    processPlaintext(plaintext);
    encrypt(matrix, plaintext, ciphertext);
    printf("\nCiphertext: %s\n", ciphertext);
    return 0;
}
